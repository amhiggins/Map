<title>Crimespotting</title>

	<%= javascript_include_tag 'protovis.js' %>
    <script src="http://maps.google.com/maps?file=api&amp;v=2&amp;sensor=false&amp;key=ABQIAAAAYZ9eMYFYusxZt-1RKXLI7RQGpXqX26B62_lhdlIUxPTUm0CSORRw1BkwdprB1xQ3Xa8KfbgKAacxlw" type="text/javascript"></script>
	<%= javascript_include_tag 'tipsy.js' %>
    <style type="text/css">

body, html {
  height: 100%;
  margin: 0;
}

#map {
  height: 80%;
  width: 80%
}

#map .canvas {
  position: absolute;
}

    </style>

    <script type="text/javascript+protovis">

var crimes = <%= raw @arrayVenues %>;

/*
	Sort and then skip over duplicates to get an array without duplicate events 
*/
	crimes.sort(function (a, b){
				if(a.date < b.date)
					return -1; 
				if(a.date > b.date)
					return 1;
				return 0;
		});

	var norCrimes = new Array();
	var i = 0;
	for(i = 1; i < crimes.length -1; i++ ){
		var j = i;
		j--;
		if( (String(crimes[i].id) == String(crimes[j].id)) && (crimes[i].date == crimes[j].date) && (crimes[i].lat == crimes[j].lat) && (crimes[i].lon == crimes[j].lon) && (crimes[i].actioncount == crimes[j].actioncount) )
		{
			//skip over the duplicates
		}
		else { norCrimes.push(crimes[i]); }
	}
	crimes = norCrimes;
/*
	end getting crimes with no duplicates
*/

  /* functions */
  /* get a js date for map display */
  function getDate(d){
		var date = new Date(d);
		date = date.toLocaleString();
	return date;
  }
  
/* data arrays of the crimes, will be filled according to timestamps */
  var monthlyCrimes = new Array();
  var inSevenDaysCrimes = new Array();
  var weeksCrimes = new Array();
  var hourlyCrimes = new Array();
  var dailyCrimes = new Array();
  var twoDaysCrimes = new Array();
  var pickedWeeksCrimes = new Array();
  var prevWeeksCrimes = new Array();
  var lastweekMonthCrimes = new Array();
  var halfHourCrimes = new Array();
  var quarterHourCrimes = new Array();
  var lastFiveMinCrimes = new Array();
  
/* Fills the crime arrays according to timestamps */
 // var currDate = new Date();
 //var hcurrDate = new Date();
 // var wcurrDate = new Date();
 //var halfhcurrDate = new Date();
 //var modHalfHour = new Date();
  var currDate = new Date(2011, 6, 28, 2, 15, 0, 0);
  var twocurrDate = new Date(currDate.getFullYear(), currDate.getMonth(), currDate.getDate(), 0, 0, 0, 0);
  var wcurrDate = new Date(2011, 6, 28, 2, 15, 0, 0);	//for weekly
  
  var modMonth = new Date (currDate.getFullYear(), currDate.getMonth()-1, 0, 0, 0, 0);
  var modHour = new Date(currDate.getFullYear(), currDate.getMonth(), currDate.getDate(), currDate.getHours()-1, 0, 0);	//for hourly, set the hour back by 1
  var modHalfHour = new Date(currDate.getFullYear(), currDate.getMonth(), currDate.getDate(), currDate.getHours(), currDate.getMinutes()-30, 0);	//for half hour
  var modFifteenMin = new Date(currDate.getFullYear(), currDate.getMonth(), currDate.getDate(), currDate.getHours(), currDate.getMinutes()-15, 0); //within last 15 min
  var modFiveMin = new Date (currDate.getFullYear(), currDate.getMonth(), currDate.getDate(), currDate.getHours(), currDate.getMinutes()-5, 0);	  //within last 5 min

 modDate = currDate.setHours(0); //sets the day back to the start; map displays everything for that day so far
 mod2Date = twocurrDate.setDate(twocurrDate.getDate()-1); //sets the date back a day, to get the crimes for the last two days
 var modWeek = wcurrDate.setDate(wcurrDate.getDate()-7); //sets the day back 7 (6 +1 from wcurrDate) to get a week's time
 
 
  for(var i in crimes){
	var convDate = new Date(crimes[i].date)
	if( modMonth <= convDate){					//in the last month
		monthlyCrimes.push(crimes[i]);
		if( modWeek <= convDate){				//in the last 7 days
				inSevenDaysCrimes.push(crimes[i]);
				
			if(twocurrDate <= convDate){			//in the last two days
				twoDaysCrimes.push(crimes[i]);
			
				if( modDate <= convDate){ 			//if same day
					dailyCrimes.push(crimes[i]);
					
					if(modHour <= convDate){ 		//if same day and same hour
						hourlyCrimes.push(crimes[i]);
						
						if(modHalfHour <= convDate){	//in the last half hour
							halfHourCrimes.push(crimes[i]);
							
							if(modFifteenMin <= convDate){	//in last 15 min
								quarterHourCrimes.push(crimes[i]);
								
								if(modFiveMin <= convDate){	//in last 5 min
									lastFiveMinCrimes.push(crimes[i]);
								}
							}
						}						
					}
				}
			}
		}
	}
  }
 //assigns the initial data to come up, make sure this is the same as the array "select"ed in the menu
ucrimes = dailyCrimes;
  
/*
	given a day, it finds and returns the start day and end day for that week
	called in getACertainWeek
*/
function weekStartDay(date){
	var startDay;
	var endDay;
	var retDays = new Array();

	day = date.getDay(); //get what day of the week it is, to know how many days to subtract
	switch(day){
		case 1:
			startDay = date.setDate(date.getDate() - 1);//new Date()
			endDay = date.setDate(date.getDate() + 6); 
			break;
		case 2:
			startDay = date.setDate(date.getDate() - 2);//new Date()
			endDay = date.setDate(date.getDate() + 6); 
			break;
		case 3:
			startDay = date.setDate(date.getDate() - 3);//new Date()
			endDay = date.setDate(date.getDate() + 6); 
			break;
		case 4:
			startDay = date.setDate(date.getDate() - 4);//new Date()
			endDay = date.setDate(date.getDate() + 6); 
			break;
		case 5:
			startDay = date.setDate(date.getDate() - 5);//new Date()
			endDay = date.setDate(date.getDate() + 6); 
			break;
		case 6:
			startDay = date.setDate(date.getDate() - 6);//new Date()
			endDay = date.setDate(date.getDate() + 6); 
			break;
	}
	retDays[0] = startDay;
	retDays[1] = endDay;
	return retDays;
}//end weekStartDay

/* crimes for a certain week */
 function getACertainWeek(date){
	var startDay = date;
	var endDay = date;
	var weekBounds = new Array();
	var pickedWeeksCrimes = new Array();

	if(date.getDay() != 0) { 
		weekBounds = weekStartDay(date); 
		startDay = weekBounds[0]; 
		endDay = weekBounds[1];
	}
	else{ 
		startDay = date; 
		endDay = date.getDate()-7;
	}

	for(var i in crimes){
		var convDate = new Date(crimes[i].date)
		if( startDay <= convDate && convDate <= endDay){ 
			pickedWeeksCrimes.push(crimes[i]);
		}
	}
	return pickedWeeksCrimes;
 }//end getACertainWeek
 
/* returns an array of crimes for the previous week */
function getLastWeek(){
	var today = new Date();
	var prevWeekCrimes = new Array();
	
	lastweek = new Date( today.getYear(), today.getMonth(), today.getDate()-6, today.getMinutes(), today.getSeconds(), today.getMilliseconds() );
	var weekBounds =  weekStartDay(lastweek);
	var startDay = weekBounds[0];
	var endDay = weekBounds[1];

	for(var i in crimes){
		var convDate = new Date(crimes[i].date);
		if( startDay <= convDate && convDate <= endDay){ 
			prevWeekCrimes.push(crimes[i]);
		}
	}
	return prevWeeksCrimes;
}

/*Initialize the week based crime arrays */
var today = new Date();
 weeksCrimes = getACertainWeek(today);
 lastweek = new Date(today.getYear(), today.getMonth(), today.getDate()-6, today.getMinutes(), today.getSeconds(), today.getMilliseconds() );
 //prevWeeksCrimes = getLastWeek();
 prevWeeksCrimes = getACertainWeek(lastweek);
 var lmlweek = new Date(2011, 5, 23, 0, 0, 0, 0);
 lastweekMonthCrimes = getACertainWeek(lmlweek);
 
/* 
	Take in the value string from menu, to change what crime array
	the map will show.  The return statement is just for possible debug of the function.
*/
function changeData(value){
	if(value == "inSevenDaysCrimes") { Canvas(inSevenDaysCrimes); return "inSevenDaysCrimes";}
	else if(value == "monthlyCrimes") { Canvas(monthlyCrimes); return "monthlyCrimes";}
	else if(value == "weeksCrimes"){Canvas(weeksCrimes);  return "weeks crimes";}
	else if(value == "lastweekMonthCrimes"){Canvas(lastweekMonthCrimes);  return "lastweekMonthCrimes";}
	else if(value == "prevWeeksCrimes"){Canvas(prevWeeksCrimes);  return "last weeks";}
	else if(value == "twoDaysCrimes"){Canvas(twoDaysCrimes);  return "two Days";}
	else if(value == "dailyCrimes") { Canvas(dailyCrimes);  return "dailyCrimes";}
	else if(value == "crimes") { Canvas(crimes); return "crimes";}
	else if(value == "halfHourCrimes") { Canvas(halfHourCrimes); return "halfHourCrimes";}
	else if(value == "quarterHourCrimes") { Canvas(quarterHourCrimes); return "quarterHourCrimes";}
	else if(value == "lastFiveMinCrimes") { Canvas(lastFiveMinCrimes); return "lastFiveMinCrimes";}
	else{ Canvas(hourlyCrimes); useData = crimes; return "hourly";}
}

/*
	Sets other information that will be displayed on the map on rollover, based on the object's "code"
	which is based on action count
*/
var codes = [
  { code: "1", name: "Malicious Lingering", category: "petty"},
  { code: "2", name: "Disturbing the Peace", category: "quality"},
  { code: "3", name: "Common Criminal", category: "property"},
  { code: "4", name: "Wanted Felon", category: "property"},
  { code: "5", name: "Enemy of the State", category: "violent"}
];
/*
	shape of icon that appears on map, according to code field, used for dots
*/
var shape = {
	1: "triangle" ,
	2:  "circle" ,
	3:  "square" ,
	4:  "square" ,
	5:  "diamond" 
};

/*
	gives name and category of crime based on the code field,
	which is assigned in venue.rb.  It is assigned based on action count. 
	Made so the information can be accessed by other functions (mainly to display to the screen)

*/
var getcode = {
   1: {name: "Malicious Lingering", category: "petty"},
   2: {name: "Disturbing the Peace", category: "quality"},
   3: {name: "Common Criminal", category: "property"},
   4: {name: "Wanted Felon", category: "property"},
   5: {name: "Enemy of the State", category: "violent"}
};
	
/*
	assigns color to the dot on map based the category field assigned in getcode array
	from the code field,
*/
var colors = {
  violent: { light: "rgba(217, 0, 0, .8)", dark: "rgb(163, 0, 0)" },
  property: {light: "rgba(225, 104, 25, .8)", dark: "rgb(255, 104, 25)"},
  quality: { light: "rgba(35, 150, 94, .8)", dark: "rgb(26, 112, 70)" },
  petty: { light: "rgba(52, 137, 186, .8)", dark: "rgb(39, 103, 139)" }
};

codes.forEach(function(x) colors[x.code] = colors[x.category]);

/*  function that changes the data thats rendered on map */
function Canvas(arr) {
  this.ucrimes = arr;
}

 Canvas.prototype = pv.extend(GOverlay);

Canvas.prototype.initialize = function(map) {
  this.map = map;
  this.canvas = document.createElement("div");
  this.canvas.setAttribute("class", "canvas");
  map.getPane(G_MAP_MAP_PANE).parentNode.appendChild(this.canvas);
};

Canvas.prototype.redraw = function(force) {
  if (!force) return;
   c = this.canvas, m = this.map, r = 20;

  /* Get the pixel locations of the crimes. */
  var pixels = this.ucrimes.map(function(d) {
      return m.fromLatLngToDivPixel(new GLatLng(d.lat, d.lon));
    });

  /* Update the canvas bounds. Note: may be large. */
  function x(p) p.x; function y(p) p.y;
  var x = { min: pv.min(pixels, x) - r, max: pv.max(pixels, x) + r };
  var y = { min: pv.min(pixels, y) - r, max: pv.max(pixels, y) + r };
  c.style.width = (x.max - x.min) + "px";
  c.style.height = (y.max - y.min) + "px";
  c.style.left = x.min + "px";
  c.style.top = y.min + "px";
  
  
  /* Render the visualization. */

 vis = new pv.Panel()
      .canvas(c)
      .left(-x.min)
      .top(-y.min)

    var dot = vis.add(pv.Panel)
      .data(this.ucrimes)

    .add(pv.Dot)
      .left(function() pixels[this.parent.index].x)
      .top(function() pixels[this.parent.index].y)
	  .shape(function(x, d) shape[d.code])
      .strokeStyle(function(x, d) colors[d.code].dark)
      .fillStyle(function(x, d) colors[d.code].light)
      .size(120)
	  .title(function(x,d) "Id: " + String(d.id) + "\n" + getcode[d.code].name + "\nWith an action count of: " + d.actioncount + "\nAt: " + getDate(d.date)  + "\n" )
	  .event("mouseover", function() this.fillStyle(function(x, d) colors[d.code].dark), function() this.strokeStyle(function(x, d) colors[d.code].light), pv.Behavior.tipsy({gravity: "Hello", fade: true})  )
	  .event("mouseout", function() this.fillStyle(function(x, d) colors[d.code].light), function() this.strokeStyle(function(x, d) colors[d.code].dark) )
	
	.anchor("center").add(pv.Label)
      .textStyle("white")
      .text(function(x, d) d.code)

    vis.render();
};

/* Restrict minimum and maximum zoom levels. */
G_NORMAL_MAP.getMinimumResolution = function() 1;
G_NORMAL_MAP.getMaximumResolution = function() 18;

var map = new GMap2(document.getElementById("map"));
map.setCenter(new GLatLng(37.45, -122.13), 12);
map.setUI(map.getDefaultUI());
map.addOverlay(new Canvas(this.ucrimes));

/*
	updates the map by using the map and canvas from Canvas.protoype,
	but recreates the pv Panel so that vis.render() can be accessed.
*/
function update(){
	
	/* to update the new map, get the map var from GMap2 */
	var changeMap = map;
	/* to get access to the canvas from Canvas.prototype.intialize */
	var changeC = c;
	changeC = this.canvas, m = this.map, r = 20;

	/* Get the pixel locations of the crimes. */
	var pixels = this.ucrimes.map(function(d) {
	  return m.fromLatLngToDivPixel(new GLatLng(d.lat, d.lon));
	});

	/* Update the canvas bounds. Note: may be large. */
	function x(p) p.x; function y(p) p.y;
	var x = { min: pv.min(pixels, x) - r, max: pv.max(pixels, x) + r };
	var y = { min: pv.min(pixels, y) - r, max: pv.max(pixels, y) + r };
	c.style.width = (x.max - x.min) + "px";
	c.style.height = (y.max - y.min) + "px";
	c.style.left = x.min + "px";
	c.style.top = y.min + "px";
  
	/* render the visualization */
	vis.render();

	/* need this block to keep map's zoom levels rendering with consistant crime array */
	var map = new GMap2(document.getElementById("map"));
	map.setCenter(new GLatLng(37.45, -122.13), 12);
	map.setUI(map.getDefaultUI());
	map.addOverlay(new Canvas(this.ucrimes));
}//end update

    </script>
  </head>
  
  <body onunload="GUnload()">
	<br>
	<br>
  <div align="right">
      <b>View:</b>
      <select id="menu" onchange = "changeData(this.value); update();" >  
	    <option value= crimes> Crimes </option>
		<option value= monthlyCrimes> Montly Crimes </option>
        <option value= inSevenDaysCrimes> Crimes in the last 7 Days </option>
		<option value= weeksCrimes> Last Month's This Week's Crimes </option>
		<option value= lastweekMonthCrimes> Last Month's week ago Crimes</option>
		<option value= prevWeeksCrimes> Last Week's Crimes </option>
		<option value= twoDaysCrimes> Last Two Days' Crimes </option>
        <option value= dailyCrimes> Crimes Within the Day </option>
        <option value= hourlyCrimes selected> Crimes Within the Hour </option>
		<option value= halfHourCrimes> Crimes Within 30 min </option> 
		<option value= quarterHourCrimes> Crimes Within Last 15 min</option>
		<option value= lastFiveMinCrimes> Crimes Within Last 5 min</option>
      </select>
    </div>
	<br>
	<div id="map"></div>
	<br>
	<%= link_to 'New Venue', new_venue_path %>
  </body>
</html>